<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>インフラ on vateira</title><link>http://example.org/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9/</link><description>Recent content in インフラ on vateira</description><generator>Hugo -- gohugo.io</generator><language>ja_jp</language><lastBuildDate>Wed, 21 Apr 2021 21:45:50 +0900</lastBuildDate><atom:link href="http://example.org/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9/index.xml" rel="self" type="application/rss+xml"/><item><title>アジャイルな開発でも仕様をドキュメント化することについて</title><link>http://example.org/posts/010-writing-specs/</link><pubDate>Thu, 06 May 2021 22:24:39 +0900</pubDate><guid>http://example.org/posts/010-writing-specs/</guid><description>&lt;p>アジャイルな開発ではドキュメントレスが取り上げられ、テストファーストが重要視されることから、仕様をドキュメントにまとめるということについてこれまでの体感では賛否両論色々あるように思う。
ここ三年ほど関わっている web サービスのプロジェクトでは、特にサーバーサイドに関しては仕様記述を割合しっかりと行っている。&lt;/p>
&lt;p>このプロジェクトでは、最初はクライアントサイドとサーバサイドの両方において VDM++を使い仕様ドキュメントを作成していた。
といっても主にクライアントサイドは陰関数定義などが主体であり、trace などを使った仕様の検証はあまりしなかったがメンバーが共通の書き方で仕様を作成できてツールによって文法チェックができるという点で非常に良かったと思う。&lt;/p>
&lt;p>ただし、いくら軽量形式手法とはいってもそれなりに作成に工数がかかることは事実で、ここ二年弱はクライアントサイドは yaml 形式で画面の構成とコントロールに対するイベントを決まった構造で記述し自前のツールで検証して markdown のドキュメンに変換するような DSL へと変わっていった。サーバサイドについても lalrpop を使って json と VDM++が合わさったようなシンタックスの DSL をチームで作り、それを用いるようになっている。
オレオレ仕様記述は結構色々なところで作られては結局一般的なツールに戻るという話をよく聞くが、現在のプロジェクトでは検証ツールとしての機能性よりも如何に簡単に必要最低限のことができるかに重きを置いているので、それなりに上手くいっているように思う。&lt;/p>
&lt;p>ただし、やはり大切なのはチームとの相性だろう。&lt;br>
現在のチームはもともとそういった技術に興味のあるメンバーで構成されているから回っているというのは事実で、エンジニアの関心ごとが別にあればよくある web サービスで導入することが費用対効果に合うかどうかは要検討だ。
例えばこのチームでは、仕様は json に変換されるのでそれを元にテストコードを生成するツールを実験的に作成してるメンバーもいたりするので、そういった場合は相性が良いだろう。
特にクライアントサイドについては非機能要件の改修や A/B テストなどの日々のマイナーアップデートなどもあるので、リソース的に厳しいことはよく感じている。&lt;/p>
&lt;p>個人的には仕様記述により仕様ドキュメントが残っていると、PM としてはエンジニアに確認を取ったり実装を追ったりせずとも仕様が分かるので、PO からのユーザーストーリーをタスクに落とし込む際などに非常に助かっているし、開発メンバー等も slack で実装の議論をする際にドキュメント化された仕様をベースにやりとりをしているので、一般的な web サービスでもそういったコミュニケーションの助けとしても非常に有効かなと思う。&lt;/p></description></item><item><title>DartでBrainf*ckインタプリタ</title><link>http://example.org/posts/009-dart-bf/</link><pubDate>Sun, 02 May 2021 20:56:04 +0900</pubDate><guid>http://example.org/posts/009-dart-bf/</guid><description>&lt;p>特にゴルフとか捻りとかもなく愚直に書いた Brainf*ck 処理系。
コードとメモリは同じクラス(_Tape)のインスタンスにしている。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Bf&lt;/span> {
&lt;span style="color:#66d9ef">final&lt;/span> _Tape&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> _code;
Bf(&lt;span style="color:#66d9ef">String&lt;/span> code) &lt;span style="color:#f92672">:&lt;/span> _code &lt;span style="color:#f92672">=&lt;/span> _Tape(code.split(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>));
&lt;span style="color:#66d9ef">void&lt;/span> eval() {
&lt;span style="color:#66d9ef">var&lt;/span> memory &lt;span style="color:#f92672">=&lt;/span> _Tape(List.filled(&lt;span style="color:#ae81ff">1024&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>));
&lt;span style="color:#66d9ef">var&lt;/span> out &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;span style="color:#66d9ef">switch&lt;/span> (_code.cur) {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
memory.forward();
&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
memory.backward();
&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
memory.inc();
&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
memory.dec();
&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
out &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>.fromCharCode(memory.cur);
&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> (memory.cur &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> depth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;span style="color:#66d9ef">switch&lt;/span> (_code.cur) {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
depth &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
depth &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;span style="color:#66d9ef">break&lt;/span>;
}
_code.backward();
} &lt;span style="color:#66d9ef">while&lt;/span> (depth &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>);
}
}
_code.forward();
} &lt;span style="color:#66d9ef">while&lt;/span> (_code.forwardable);
print(out);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">_Tape&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">final&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> data;
&lt;span style="color:#66d9ef">int&lt;/span> _index;
_Tape(&lt;span style="color:#66d9ef">this&lt;/span>.data) &lt;span style="color:#f92672">:&lt;/span> _index &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
T &lt;span style="color:#66d9ef">get&lt;/span> cur &lt;span style="color:#f92672">=&amp;gt;&lt;/span> data[_index];
&lt;span style="color:#66d9ef">void&lt;/span> forward() {
_index &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">void&lt;/span> backward() {
_index &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
&lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#66d9ef">get&lt;/span> forwardable &lt;span style="color:#f92672">=&amp;gt;&lt;/span> _index &lt;span style="color:#f92672">&amp;lt;&lt;/span> data.length;
}
extension _Memory on _Tape&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">void&lt;/span> inc() {
data[_index]&lt;span style="color:#f92672">++&lt;/span>;
}
&lt;span style="color:#66d9ef">void&lt;/span> dec() {
data[_index]&lt;span style="color:#f92672">--&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>呼び出しがわ&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">
&lt;span style="color:#66d9ef">void&lt;/span> main(List&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> arguments) {
&lt;span style="color:#66d9ef">final&lt;/span> code &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#e6db74"> &amp;gt;+++++++++[&amp;lt;++++++++&amp;gt;-]&amp;lt;.&amp;gt;+++++++[&amp;lt;++++&amp;gt;-]
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;+.+++++++..+++.[-]&amp;gt;++++++++[&amp;lt;++++&amp;gt;-]&amp;lt;.&amp;gt;++
&lt;/span>&lt;span style="color:#e6db74"> +++++++++[&amp;lt;+++++&amp;gt;-]&amp;lt;.&amp;gt;++++++++[&amp;lt;+++&amp;gt;-]&amp;lt;.++
&lt;/span>&lt;span style="color:#e6db74"> +.------.--------.[-]&amp;gt;++++++++[&amp;lt;++++&amp;gt;-]&amp;lt;+.[
&lt;/span>&lt;span style="color:#e6db74"> -]++++++++++.
&lt;/span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">final&lt;/span> bf &lt;span style="color:#f92672">=&lt;/span> Bf(code);
bf.eval();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% dart run
Hello World!
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Zigで「はりぼて言語」をつくる</title><link>http://example.org/posts/008-zig-haribote/</link><pubDate>Fri, 30 Apr 2021 10:00:00 +0900</pubDate><guid>http://example.org/posts/008-zig-haribote/</guid><description>&lt;p>Twitter で&lt;a href="http://essen.osask.jp/?a21_txt01"target="_blank" rel="noopener noreferrer">はりぼて言語&lt;/a>
を見かけたので、Zig で実装してみる。&lt;/p>
&lt;p>ほぼそのままだけど、Zig でのコマンドライン引数の扱いをまだ把握していないのでファイル名は固定。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zig" data-lang="zig">&lt;span style="color:#66d9ef">const&lt;/span> std &lt;span style="color:#f92672">=&lt;/span> @import(&lt;span style="color:#e6db74">&amp;#34;std&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> print &lt;span style="color:#f92672">=&lt;/span> std.debug.print;
&lt;span style="color:#66d9ef">const&lt;/span> fs &lt;span style="color:#f92672">=&lt;/span> std.fs;
&lt;span style="color:#66d9ef">const&lt;/span> LangError &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>{
InvalidSyntax,
};
&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> main() &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">try&lt;/span> fs.cwd().openFile(&lt;span style="color:#e6db74">&amp;#34;test.hl&amp;#34;&lt;/span>, .{ .read &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> });
&lt;span style="color:#66d9ef">defer&lt;/span> file.close();
&lt;span style="color:#66d9ef">var&lt;/span> code&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1024&lt;/span>]&lt;span style="color:#66d9ef">u8&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">try&lt;/span> file.readAll(code[&lt;span style="color:#ae81ff">0&lt;/span>..]);
&lt;span style="color:#66d9ef">var&lt;/span> vars&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">256&lt;/span>]&lt;span style="color:#66d9ef">u8&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;span style="color:#66d9ef">var&lt;/span> i&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">u8&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> (i &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) {
vars[&lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> i] &lt;span style="color:#f92672">=&lt;/span> i;
}
&lt;span style="color:#66d9ef">var&lt;/span> pc&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">u8&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">while&lt;/span> (pc &lt;span style="color:#f92672">&amp;lt;&lt;/span> size) &lt;span style="color:#f92672">:&lt;/span> (pc &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (code[pc] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">&amp;#39;\n&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">or&lt;/span> code[pc] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">&amp;#39;\r&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">or&lt;/span> code[pc] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">&amp;#39;\t&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">or&lt;/span> code[pc] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#66d9ef">or&lt;/span> code[pc] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;span style="color:#66d9ef">if&lt;/span> (code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>) {
vars[code[pc]] &lt;span style="color:#f92672">=&lt;/span> vars[code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]];
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;+&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>) {
vars[code[pc]] &lt;span style="color:#f92672">=&lt;/span> vars[code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]] &lt;span style="color:#f92672">+&lt;/span> vars[code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>]];
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>) {
vars[code[pc]] &lt;span style="color:#f92672">=&lt;/span> vars[code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]] &lt;span style="color:#f92672">-&lt;/span> vars[code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>]];
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (code[pc] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;p&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>) {
print(&lt;span style="color:#e6db74">&amp;#34;{d}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, .{vars[code[pc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>]]});
} &lt;span style="color:#66d9ef">else&lt;/span> {
print(&lt;span style="color:#e6db74">&amp;#34;syntax error: {c}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, .{code[pc]});
&lt;span style="color:#66d9ef">return&lt;/span> LangError.InvalidSyntax;
}
&lt;span style="color:#66d9ef">while&lt;/span> (code[pc] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>) pc &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>こんな感じでスクリプトを用意。&lt;/p>
&lt;pre>&lt;code>a=1;
b=2;
c=a+b;
print c;
&lt;/code>&lt;/pre>&lt;p>そして実行&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zsh" data-lang="zsh">% haribote % zig run ./main.zig
&lt;span style="color:#ae81ff">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>zigでファイルを開く方法のメモ</title><link>http://example.org/posts/007-zig-fopen/</link><pubDate>Thu, 29 Apr 2021 10:20:00 +0900</pubDate><guid>http://example.org/posts/007-zig-fopen/</guid><description>&lt;p>zig の std は変更が激しいので、公式以外のネット上の情報があまり参考にならない。
とりあえず、0.7.1 でのファイルを開く方法。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-zig" data-lang="zig">&lt;span style="color:#66d9ef">const&lt;/span> std &lt;span style="color:#f92672">=&lt;/span> @import(&lt;span style="color:#e6db74">&amp;#34;std&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">const&lt;/span> print &lt;span style="color:#f92672">=&lt;/span> std.debug.print;
&lt;span style="color:#66d9ef">const&lt;/span> fs &lt;span style="color:#f92672">=&lt;/span> std.fs;
&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> main() &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">try&lt;/span> fs.cwd().openFile(&lt;span style="color:#e6db74">&amp;#34;test.txt&amp;#34;&lt;/span>, .{ .read &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> });
&lt;span style="color:#66d9ef">defer&lt;/span> file.close();
&lt;span style="color:#66d9ef">var&lt;/span> buffer&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1024&lt;/span>]&lt;span style="color:#66d9ef">u8&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">try&lt;/span> file.readAll(buffer[&lt;span style="color:#ae81ff">0&lt;/span>..]);
print(&lt;span style="color:#e6db74">&amp;#34;{s}&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, .{buffer[&lt;span style="color:#ae81ff">0&lt;/span>..size]});
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイル関係は &lt;code>std.fs&lt;/code> にまとめられている。
ファイルを開く際は、まず Dir 構造体を生成して、&lt;code>openFile&lt;/code>関数を呼び出すと良い。&lt;/p>
&lt;p>バッファについてはコンパイル時にはサイズが分からないので、1024 で確保している。&lt;/p></description></item><item><title>Dartでの関数の部分適用</title><link>http://example.org/posts/006-dart-partial-application/</link><pubDate>Wed, 28 Apr 2021 09:22:09 +0900</pubDate><guid>http://example.org/posts/006-dart-partial-application/</guid><description>&lt;p>Dart は言語として部分適用をサポートしていない。
前回パイプライン演算子的なものを作ったので、それと組み合わせるために部分適用っぽいことができる仕組みを考えてみる。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Partible&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> arity;
T&lt;span style="color:#f92672">?&lt;/span> _value;
&lt;span style="color:#66d9ef">final&lt;/span> Function proc;
Partible(&lt;span style="color:#66d9ef">this&lt;/span>.arity, &lt;span style="color:#66d9ef">this&lt;/span>.proc);
Partible&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> call(List&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">dynamic&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> args) {
&lt;span style="color:#66d9ef">if&lt;/span>(args.length &lt;span style="color:#f92672">==&lt;/span> arity) {
_value &lt;span style="color:#f92672">=&lt;/span> Function.apply(proc, args);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">switch&lt;/span>(arity &lt;span style="color:#f92672">-&lt;/span> args.length) {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> Partible(&lt;span style="color:#ae81ff">1&lt;/span>, (x) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Function.apply(proc, [...args, x]));
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> Partible(&lt;span style="color:#ae81ff">2&lt;/span>, (x, y) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Function.apply(proc, [...args, x, y]));
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> Partible(&lt;span style="color:#ae81ff">3&lt;/span>, (x, y, z) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Function.apply(proc, [...args, x, y, z]));
&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#e6db74">&amp;#39;invalid args&amp;#39;&lt;/span>;
}
}
}
T&lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">get&lt;/span> value &lt;span style="color:#f92672">=&amp;gt;&lt;/span> _value;
}
&lt;span style="color:#66d9ef">void&lt;/span> main() {
&lt;span style="color:#66d9ef">final&lt;/span> times &lt;span style="color:#f92672">=&lt;/span> (x, y, z) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> y &lt;span style="color:#f92672">*&lt;/span> z;
&lt;span style="color:#66d9ef">final&lt;/span> p1 &lt;span style="color:#f92672">=&lt;/span> Partible(&lt;span style="color:#ae81ff">3&lt;/span>, times);
&lt;span style="color:#66d9ef">final&lt;/span> p2 &lt;span style="color:#f92672">=&lt;/span> p1([&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>]);
print(p2([&lt;span style="color:#ae81ff">4&lt;/span>]).value);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>勢いでやってみたので、もっと綺麗にはできると思う。
このやり方の場合、任意の関数のアリティが取得できたり、可変長引数サポートしていたり、メソッドのオーバーロードができたりすればもっとすっきりできそう。&lt;/p></description></item><item><title>Dartでパイプライン演算子的なのを作る</title><link>http://example.org/posts/005-dart-pipeline/</link><pubDate>Mon, 26 Apr 2021 08:00:00 +0900</pubDate><guid>http://example.org/posts/005-dart-pipeline/</guid><description>&lt;p>Dart で F#や Elixir みたいなパイプライン演算子ができるかと思って実験。
Dart には部分的用とか無いので、作ってみたものの実用性は無いか。&lt;/p>
&lt;p>ちなみに tc52 ではなく tc39 だと stage 1 に &lt;a href="https://github.com/tc39/proposal-pipeline-operator"target="_blank" rel="noopener noreferrer">pipeline 演算子が出ているので&lt;/a>
、JavaScript はそのうちできるようになるかも。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Pipeable&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">final&lt;/span> T value;
Pipeable(&lt;span style="color:#66d9ef">this&lt;/span>.value);
Pipeable &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> (Function(T) f)
{
&lt;span style="color:#66d9ef">return&lt;/span> Pipeable(f(value));
}
}
&lt;span style="color:#66d9ef">void&lt;/span> main() {
Pipeable(&lt;span style="color:#ae81ff">10&lt;/span>)
&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> ((x) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> x)
&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> ((x) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;squared value is &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>x&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> ((x) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> print(x))
;
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SMTソルバ(z3)で魔方陣を解く</title><link>http://example.org/posts/004-magic-square/</link><pubDate>Fri, 23 Apr 2021 07:31:39 +0900</pubDate><guid>http://example.org/posts/004-magic-square/</guid><description>&lt;p>minisat で魔方陣を解こうかと思ったけれども、CNF で和の制約を書くのが大変そうだったので SMT ソルバを使って解く。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% pip install z3-solver
&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとはスクリプトを書くだけ。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python:magic-square.py" data-lang="python:magic-square.py">&lt;span style="color:#f92672">from&lt;/span> z3 &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
solver &lt;span style="color:#f92672">=&lt;/span> Solver()
&lt;span style="color:#75715e"># 5 * 5 の魔方陣を扱う&lt;/span>
size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;span style="color:#75715e"># 各行,列,対角線の和&lt;/span>
summary &lt;span style="color:#f92672">=&lt;/span> ((size &lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> size) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#75715e"># 0〜n^2の変数を用意する&lt;/span>
cells &lt;span style="color:#f92672">=&lt;/span> [Int(&lt;span style="color:#e6db74">&amp;#34;c[&lt;/span>&lt;span style="color:#e6db74">%d&lt;/span>&lt;span style="color:#e6db74">]&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> x) &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> range(size &lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)]
&lt;span style="color:#75715e"># 各セルは1〜n^2の数字が入る&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> range(size &lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>):
solver&lt;span style="color:#f92672">.&lt;/span>add(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> cells[x], cells[x] &lt;span style="color:#f92672">&amp;lt;=&lt;/span> size &lt;span style="color:#f92672">**&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;span style="color:#75715e"># それぞれの数字は一度のみ現れる&lt;/span>
solver&lt;span style="color:#f92672">.&lt;/span>add(Distinct(cells))
&lt;span style="color:#75715e"># 各行の和はsummaryになる&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(size):
rows &lt;span style="color:#f92672">=&lt;/span> [cells[i &lt;span style="color:#f92672">*&lt;/span> size &lt;span style="color:#f92672">+&lt;/span> x] &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> range(size)]
solver&lt;span style="color:#f92672">.&lt;/span>add(sum(rows) &lt;span style="color:#f92672">==&lt;/span> summary)
&lt;span style="color:#75715e"># 各列の和はsummaryになる&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(size):
cols &lt;span style="color:#f92672">=&lt;/span> [cells[x &lt;span style="color:#f92672">*&lt;/span> size &lt;span style="color:#f92672">+&lt;/span> i] &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> range(size)]
solver&lt;span style="color:#f92672">.&lt;/span>add(sum(cols) &lt;span style="color:#f92672">==&lt;/span> summary)
&lt;span style="color:#75715e"># 対角線1の和はsummaryになる&lt;/span>
dia1 &lt;span style="color:#f92672">=&lt;/span> [cells[x &lt;span style="color:#f92672">*&lt;/span> size &lt;span style="color:#f92672">+&lt;/span> x] &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> range(size)]
solver&lt;span style="color:#f92672">.&lt;/span>add(sum(dia1) &lt;span style="color:#f92672">==&lt;/span> summary)
&lt;span style="color:#75715e"># 対角線2の和はsummaryになる&lt;/span>
dia2 &lt;span style="color:#f92672">=&lt;/span> [cells[(x &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (size &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)] &lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> range(size)]
solver&lt;span style="color:#f92672">.&lt;/span>add(sum(dia2) &lt;span style="color:#f92672">==&lt;/span> summary)
&lt;span style="color:#75715e"># 予めセルに何か指定しておく&lt;/span>
solver&lt;span style="color:#f92672">.&lt;/span>add(cells[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>)
solver&lt;span style="color:#f92672">.&lt;/span>add(cells[&lt;span style="color:#ae81ff">12&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>)
&lt;span style="color:#75715e"># 解を求める&lt;/span>
solver&lt;span style="color:#f92672">.&lt;/span>check()
&lt;span style="color:#75715e"># 表示&lt;/span>
model &lt;span style="color:#f92672">=&lt;/span> solver&lt;span style="color:#f92672">.&lt;/span>model()
&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(size):
&lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(size):
cell &lt;span style="color:#f92672">=&lt;/span> cells[i &lt;span style="color:#f92672">*&lt;/span> size &lt;span style="color:#f92672">+&lt;/span> j]
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%d&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">%&lt;/span> model[cell]&lt;span style="color:#f92672">.&lt;/span>as_long(), end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% python3 ./magic_square.py
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">22&lt;/span> &lt;span style="color:#ae81ff">17&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span>
&lt;span style="color:#ae81ff">24&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span> &lt;span style="color:#ae81ff">23&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>
&lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>今回は 5 * 5 の魔方陣用に作成したけれども、size を変更して具体的な値の制約を削除または変更すればそれ以外の大きさの魔方陣にも対応できる。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">&lt;span style="color:#f92672">- # 5 * 5 の魔方陣を扱う
&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+ # 3 * 3 の魔方陣を扱う
&lt;/span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#f92672">- size = 5
&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+ size = 3
&lt;/span>&lt;span style="color:#a6e22e">&lt;/span>
&lt;span style="color:#f92672">- # 予めセルに何か指定しておく
&lt;/span>&lt;span style="color:#f92672">- solver.add(cells[0] == 10)
&lt;/span>&lt;span style="color:#f92672">- solver.add(cells[12] == 13)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% python3 ./magic_square.py
&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>SAT ソルバで CNF 形式で行や列ごとの和の制約を表現するのはめちゃくちゃ大変そうだったけれども、SMT ソルバでこういうふうにできるのであれば結構簡単だ。特に python 向けの z3 は通常の算術演算子が使えて、&lt;code>sum&lt;/code>なども利用できるので直感的に記述できるのが便利。&lt;/p></description></item><item><title>サーバサイドDartのアイデア</title><link>http://example.org/posts/003-serverside-dart/</link><pubDate>Thu, 22 Apr 2021 18:18:03 +0900</pubDate><guid>http://example.org/posts/003-serverside-dart/</guid><description>&lt;p>モバイルアプリ開発において、開発リソースが潤沢でないのであれば Flutter の導入は非常に強力な選択肢となる。じっさい、ここ三年ほどスタートアップにてメインのプロダクトを Flutter で開発していて個人的にはとても気に入っている(Dart への不満はゼロでは無いけれども)。&lt;/p>
&lt;p>そして、Flutter において個人的に状態管理の肝となっているのは freezed パッケージの存在だ。
Kotlin の data class のようなものが言語として提供されていないが、昨今の GUI アプリケーションで immutable なデータ構造無しに状態管理をするのは非常に辛いものがある。当初はこういったもの無しでもなんとかやれていたが、アプリケーションの仕様が複雑になるにつれて、こいつの存在は必須になってきた。&lt;/p>
&lt;p>この freezed 自体は Dart のパッケージとして提供されているので、Flutter 以外でも使うことができる。もしモバイルアプリがサーバと通信するのであれば、サーバサイドも Dart で実装して freezed で作成したエンティティなどを共有すれば、非常に効率よくコードを共有できるのでは無いだろうか。また、抽象化されたアプリケーションロジックを共有することができれば、テストなども効率化できそうな気がする。&lt;/p>
&lt;p>ということで、Dart の web フレームワークを調べたところ、&lt;a href="https://github.com/stablekernel/aqueduct"target="_blank" rel="noopener noreferrer">aqueduct&lt;/a>
が一番メジャーっぽかったのだけれども、これが丁度先月あたりにプロジェクトが凍結されてしまっていた。他の web フレームワークはメンテナンスやユーザー数からしてもプロダクトに採用するには少し心許ない。&lt;/p>
&lt;p>などと漁っていたが、どうやら Dart 公式のミドルウェアフレームワークである&lt;a href="https://github.com/dart-lang/shelf"target="_blank" rel="noopener noreferrer">shelf&lt;/a>
が非常に使いやすそうである。&lt;a href="https://pub.dev/packages/shelf_router"target="_blank" rel="noopener noreferrer">shelf_router&lt;/a>
と組み合わせれば、簡単にアプリケーションサーバーを実装できる。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#39;package:shelf_router/shelf_router.dart&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#39;package:shelf/shelf.dart&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#39;package:shelf/shelf_io.dart&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> io;
&lt;span style="color:#66d9ef">var&lt;/span> app &lt;span style="color:#f92672">=&lt;/span> Router();
app.&lt;span style="color:#66d9ef">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/hello&amp;#39;&lt;/span>, (Request request) {
&lt;span style="color:#66d9ef">return&lt;/span> Response.ok(&lt;span style="color:#e6db74">&amp;#39;hello-world&amp;#39;&lt;/span>);
});
app.&lt;span style="color:#66d9ef">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/user/&amp;lt;user&amp;gt;&amp;#39;&lt;/span>, (Request request, &lt;span style="color:#66d9ef">String&lt;/span> user) {
&lt;span style="color:#66d9ef">return&lt;/span> Response.ok(&lt;span style="color:#e6db74">&amp;#39;hello &lt;/span>&lt;span style="color:#e6db74">$&lt;/span>user&lt;span style="color:#e6db74">&amp;#39;&lt;/span>);
});
&lt;span style="color:#66d9ef">var&lt;/span> server &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> io.serve(app.handler, &lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">8080&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>試してみたところ、deno の oak や php の slim のような感じだ。モバイルアプリで RESTful api をリクエストするような用途であれば十分だろう。
それとこの Shelf、ミドルウェアを自作するのも容易なので、&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#e6db74">&amp;#39;package:shelf/shelf.dart&amp;#39;&lt;/span>;
Middleware auth() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> (innerHandler) {
&lt;span style="color:#66d9ef">return&lt;/span> (request) &lt;span style="color:#66d9ef">async&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">認証失敗&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> Response(&lt;span style="color:#ae81ff">401&lt;/span>, body: &lt;span style="color:#e6db74">&amp;#39;FORBIDDEN&amp;#39;&lt;/span>);
}
&lt;span style="color:#66d9ef">final&lt;/span> response &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> innerHandler(request);
&lt;span style="color:#66d9ef">return&lt;/span> response;
};
};
&lt;span style="color:#66d9ef">final&lt;/span> handler &lt;span style="color:#f92672">=&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> Pipeline().addMiddleware(auth()).addHandler(router());
&lt;/code>&lt;/pre>&lt;/div>&lt;p>のように色々追加できる。
あとはこんな感じでプロダクトを分割すれば良さそう。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>package&lt;/th>
&lt;th>概要&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>core&lt;/td>
&lt;td>entity, application logic やリポジトリなどのインタフェース&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>client&lt;/td>
&lt;td>Flutter アプリ。アプリケーションロジックは core を使う。またリポジトリに server を指定する&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>server&lt;/td>
&lt;td>アプリケーションサーバー。アプリケーションロジックは core を使う。リポジトリは DB などを使う&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>新規プロダクト開発のインフラについて</title><link>http://example.org/posts/002-infra-for-new-products/</link><pubDate>Wed, 21 Apr 2021 21:45:50 +0900</pubDate><guid>http://example.org/posts/002-infra-for-new-products/</guid><description>&lt;p>これはプロダクトがどういったものであるかなどを考慮して決めるものなので、これといった定石は無いとは思っている。&lt;/p>
&lt;p>ただ「とりあえず何か」という話であれば、自分のように小中規模の組織で web サービスを始めるケースであれば最近は AWS Lightsail が良いのでは無いだろうか。理由は昨年からのコンテナのサポートだ。&lt;/p>
&lt;p>これから何かプロダクトを作り始めるにあたり、AWS や GCP といった IaaS を利用する際に気になるのはランニングコストだろう。格安とはいえ使い方次第では思った以上に出費が嵩むことも有り得るので、定額で計算できた方が良い。そのあたり Lightsail は見積もり安いし、出費は増えるがマネージド DB やロードバランサも提供されていて、必要最低限のものは一通り揃っている。&lt;/p>
&lt;p>そして、その Lightsail は去年からコンテナのデプロイができるようになったのだ。
これで開発環境も実行環境も docker image で共通化が可能だ。例えばサーバサイドとクライアントサイドが別々になっているようなプロダクトであれば、サーバサイドを docker image で共有できるのは間違いなく便利だろう。&lt;/p>
&lt;p>ECR や dockerhub のプライベートイメージとの連携はサポートされていないのが残念だけれども、GitHub Actions などの CI ツールでコマンドを叩くのもそこまで大変ではない。&lt;/p>
&lt;p> ここからは個人的な好みになってくるけれども、近頃は deno が面白い。node.js などとは違い、標準で単一の実行バイナリに変換できるので、開発者以外は実行環境を特別に用意する必要がなくて便利。TypeScript での開発も結構生産性が高くて良いと思う。
今のところ SQL の扱いに関しては、キラーパッケージというか「これだ」というのが出ていないのは少し残念ではあるけれども&amp;hellip;&lt;/p></description></item><item><title>ユーザーストーリーをソフトウェアの設計にそのまま落とし込むアイデア</title><link>http://example.org/posts/001-usecase-oriented-design/</link><pubDate>Tue, 20 Apr 2021 21:56:31 +0900</pubDate><guid>http://example.org/posts/001-usecase-oriented-design/</guid><description>&lt;p>アジャイルな開発を導入する際に、バックログに積むタスクをユーザーストーリーとして表すプラクティスを取り入れることが多い。
シンプルなルールなので取り組みやすいイメージがあるのだけれども、プロジェクトが進んでいくとロールやユーザーができることの抽象度などを運用していくことが思いの外難しいと感じることが個人的には多いのだ。&lt;/p>
&lt;p>原因の一つはユーザーストーリーが「タスク内容を分かりやすくまとめたタイトル」という役目に止まっていることなのかもしれない。&lt;/p>
&lt;p>もし、ユーザークラスをソフトウェアの機能の単位として扱うことができれば、開発メンバーなどが普段からユーザーストーリーの表現そのものを意識する機会も増えて上記の問題は解決できるのかもしれない。また、ソフトウェアの設計自体もバックログに積まれていたタスクと一対一の対応が取れて、保守がしやすくなる可能性もある。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart:users.dart" data-lang="dart:users.dart">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span> User {}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Guest&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> User {}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Member&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> User {
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span> id;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>このように、プロダクトを利用するユーザーを全てクラスとして定義する。&lt;/p>
&lt;p>それぞれのユーザーストーリーは、何かのユーザーを表現するクラスのメンバーとして定義するのが良さそうだ。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart:member_see_their_purchase_history.dart" data-lang="dart:member_see_their_purchase_history.dart">&lt;span style="color:#75715e">// member_see_their_purchase_history.dart
&lt;/span>&lt;span style="color:#75715e">&lt;/span>extension MemberSeeTheirPurchaseHistory on Member {
List&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">dynamic&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> seeTheirPurchaseHistory() &lt;span style="color:#66d9ef">async&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> DB.instance().getPurchaseHistoryOf(&lt;span style="color:#66d9ef">this&lt;/span>.id);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>うまくユーザーストーリーを設計することができれば、このユーザーストーリーが表すのはユースケースやアプリケーションロジックである。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart:server.dart" data-lang="dart:server.dart">&lt;span style="color:#75715e">// server.dart
&lt;/span>&lt;span style="color:#75715e">&lt;/span>router.&lt;span style="color:#66d9ef">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/purchase-history&amp;#39;&lt;/span>, (request) &lt;span style="color:#66d9ef">async&lt;/span> {
&lt;span style="color:#75715e">// リクエストなどからユーザーのロールを取得する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> member &lt;span style="color:#f92672">=&lt;/span> accountFromHeader(request.header);
&lt;span style="color:#75715e">// ロールがメンバーであれば、購買履歴を取得する
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(member &lt;span style="color:#66d9ef">is&lt;/span> Member) {
&lt;span style="color:#66d9ef">final&lt;/span> history &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> member.seeTheirPurchaseHistory();
&lt;span style="color:#66d9ef">return&lt;/span> jsonEncode(history);
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#ae81ff">401&lt;/span>;
}
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>コード量の関係で、リポジトリが&lt;code>DB&lt;/code>というクラスであったり、api サーバが json を返したりすることが前提になっているが、実際はこの辺りは依存性の注入などによって切り替えられるようにしておくと良いだろう。&lt;/p></description></item></channel></rss>